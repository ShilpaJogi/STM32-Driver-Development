
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001110  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d4  080012d4  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012d4  080012d4  00003038  2**0
                  CONTENTS
  4 .ARM          00000008  080012d4  080012d4  000022d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012dc  080012dc  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012dc  080012dc  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012e0  080012e0  000022e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  080012e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000038  0800131c  00003038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800131c  00003070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018c0  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000677  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00004fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016b  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000273f  00000000  00000000  000052f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dc7  00000000  00000000  00007a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a432  00000000  00000000  000097f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000748  00000000  00000000  00013c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000038 	.word	0x20000038
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080012bc 	.word	0x080012bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000003c 	.word	0x2000003c
 8000200:	080012bc 	.word	0x080012bc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <I2C1_GPIOInits>:
/*
 * PB6 -> I2C1_SCL
 * PB9 -> I2C1_SDA
 */
void I2C1_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <I2C1_GPIOInits+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000226:	2301      	movs	r3, #1
 8000228:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800022a:	2304      	movs	r3, #4
 800022c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]
	//configure serial clock
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000232:	2308      	movs	r3, #8
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f901 	bl	8000440 <GPIO_Init>

	//configure serial data
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800023e:	2309      	movs	r3, #9
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f8fb 	bl	8000440 <GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <I2C1_Inits+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <I2C1_Inits+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <I2C1_Inits+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	719a      	strb	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <I2C1_Inits+0x2c>)
 800026a:	2268      	movs	r2, #104	@ 0x68
 800026c:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <I2C1_Inits+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	71da      	strb	r2, [r3, #7]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = (uint8_t)I2C_SCL_SPEED_FM4K;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <I2C1_Inits+0x2c>)
 8000276:	2280      	movs	r2, #128	@ 0x80
 8000278:	711a      	strb	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	@ (8000284 <I2C1_Inits+0x2c>)
 800027c:	f000 fca8 	bl	8000bd0 <I2C_Init>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000054 	.word	0x20000054
 8000288:	40005400 	.word	0x40005400

0800028c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GPIOLed;
	GPIOBtn.pGPIOx = GPIOC;
 8000292:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <GPIO_ButtonInit+0x54>)
 8000294:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000296:	230d      	movs	r3, #13
 8000298:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029a:	2300      	movs	r3, #0
 800029c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a2:	2300      	movs	r3, #0
 80002a4:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f8c8 	bl	8000440 <GPIO_Init>

	//this is led GPIO configuration
	GPIOLed.pGPIOx = GPIOD;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <GPIO_ButtonInit+0x58>)
 80002b2:	603b      	str	r3, [r7, #0]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b4:	230c      	movs	r3, #12
 80002b6:	713b      	strb	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002b8:	2301      	movs	r3, #1
 80002ba:	717b      	strb	r3, [r7, #5]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002bc:	2302      	movs	r3, #2
 80002be:	71bb      	strb	r3, [r7, #6]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002c0:	2301      	movs	r3, #1
 80002c2:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c4:	2300      	movs	r3, #0
 80002c6:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 80002c8:	2101      	movs	r1, #1
 80002ca:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <GPIO_ButtonInit+0x58>)
 80002cc:	f000 fa50 	bl	8000770 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOLed);
 80002d0:	463b      	mov	r3, r7
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8b4 	bl	8000440 <GPIO_Init>
}
 80002d8:	bf00      	nop
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40020800 	.word	0x40020800
 80002e4:	40020c00 	.word	0x40020c00

080002e8 <main>:
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002ec:	f7ff ffce 	bl	800028c <GPIO_ButtonInit>

	//I2C pin initialization
	I2C1_GPIOInits();
 80002f0:	f7ff ff90 	bl	8000214 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 80002f4:	f7ff ffb0 	bl	8000258 <I2C1_Inits>

	//I2C IRQ configuration
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	201f      	movs	r0, #31
 80002fc:	f000 fce6 	bl	8000ccc <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	2020      	movs	r0, #32
 8000304:	f000 fce2 	bl	8000ccc <I2C_IRQConfig>

	I2C_SlaveEnDiCallbackEvents(I2C1, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	4806      	ldr	r0, [pc, #24]	@ (8000324 <main+0x3c>)
 800030c:	f000 fb73 	bl	80009f6 <I2C_SlaveEnDiCallbackEvents>

	//enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	4804      	ldr	r0, [pc, #16]	@ (8000324 <main+0x3c>)
 8000314:	f000 fd5c 	bl	8000dd0 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAck(I2C1, I2C_ACK_ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	4802      	ldr	r0, [pc, #8]	@ (8000324 <main+0x3c>)
 800031c:	f000 fd74 	bl	8000e08 <I2C_ManageAck>

	while(1);
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x38>
 8000324:	40005400 	.word	0x40005400

08000328 <I2C1_EV_IRQHandler>:

}
void I2C1_EV_IRQHandler (void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 800032c:	4802      	ldr	r0, [pc, #8]	@ (8000338 <I2C1_EV_IRQHandler+0x10>)
 800032e:	f000 fdf3 	bl	8000f18 <I2C_EV_IRQHandling>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000054 	.word	0x20000054

0800033c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <I2C1_ER_IRQHandler+0x10>)
 8000342:	f000 fec4 	bl	80010ce <I2C_ER_IRQHandling>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000054 	.word	0x20000054

08000350 <I2C_AppEventCallback>:
void I2C_AppEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandcode = 0;
	static uint8_t count = 0;
	if(AppEvent == I2C_EV_DATA_REQ)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b08      	cmp	r3, #8
 8000360:	d123      	bne.n	80003aa <I2C_AppEventCallback+0x5a>
	{
		//master wants some data, slave has to send it
		if(commandcode == 0x51)
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <I2C_AppEventCallback+0x90>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b51      	cmp	r3, #81	@ 0x51
 8000368:	d10b      	bne.n	8000382 <I2C_AppEventCallback+0x32>
		{
			//send length information to master
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)Tx_buf));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681c      	ldr	r4, [r3, #0]
 800036e:	481d      	ldr	r0, [pc, #116]	@ (80003e4 <I2C_AppEventCallback+0x94>)
 8000370:	f7ff ff48 	bl	8000204 <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4619      	mov	r1, r3
 800037a:	4620      	mov	r0, r4
 800037c:	f000 fc8a 	bl	8000c94 <I2C_SlaveSendData>
	{
		//this happens during slave Rx
		//master has ended the I2C comm with the slave

	}
}
 8000380:	e029      	b.n	80003d6 <I2C_AppEventCallback+0x86>
		}else if(commandcode == 0x52)
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <I2C_AppEventCallback+0x90>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b52      	cmp	r3, #82	@ 0x52
 8000388:	d125      	bne.n	80003d6 <I2C_AppEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, Tx_buf[count++]);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <I2C_AppEventCallback+0x98>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	1c59      	adds	r1, r3, #1
 8000394:	b2c8      	uxtb	r0, r1
 8000396:	4914      	ldr	r1, [pc, #80]	@ (80003e8 <I2C_AppEventCallback+0x98>)
 8000398:	7008      	strb	r0, [r1, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <I2C_AppEventCallback+0x94>)
 800039e:	5c5b      	ldrb	r3, [r3, r1]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4610      	mov	r0, r2
 80003a4:	f000 fc76 	bl	8000c94 <I2C_SlaveSendData>
}
 80003a8:	e015      	b.n	80003d6 <I2C_AppEventCallback+0x86>
	}else if(AppEvent == I2C_EV_DATA_RCV)
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	2b09      	cmp	r3, #9
 80003ae:	d109      	bne.n	80003c4 <I2C_AppEventCallback+0x74>
		commandcode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fc7c 	bl	8000cb2 <I2C_SlaveReceiveData>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <I2C_AppEventCallback+0x90>)
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	e008      	b.n	80003d6 <I2C_AppEventCallback+0x86>
	}else if(AppEvent == I2C_ERROR_AF)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b05      	cmp	r3, #5
 80003c8:	d105      	bne.n	80003d6 <I2C_AppEventCallback+0x86>
		commandcode = 0xff;
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <I2C_AppEventCallback+0x90>)
 80003cc:	22ff      	movs	r2, #255	@ 0xff
 80003ce:	701a      	strb	r2, [r3, #0]
		count = 0;
 80003d0:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <I2C_AppEventCallback+0x98>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd90      	pop	{r4, r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000006c 	.word	0x2000006c
 80003e4:	20000000 	.word	0x20000000
 80003e8:	2000006d 	.word	0x2000006d

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	@ (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	@ (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	@ (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 ff2b 	bl	8001274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ff63 	bl	80002e8 <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000430:	080012e4 	.word	0x080012e4
  ldr r2, =_sbss
 8000434:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000438:	20000070 	.word	0x20000070

0800043c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC_IRQHandler>
	...

08000440 <GPIO_Init>:
 * param[1]		: GPIO pin configuration handler
 * return		: None
 * note			: None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
	//enable the GPIO peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f98c 	bl	8000770 <GPIO_PeriClockControl>

	//GPIO pin mode configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d81f      	bhi.n	80004a0 <GPIO_Init+0x60>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clear bits
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	4619      	mov	r1, r3
 800047e:	2303      	movs	r3, #3
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//set bits
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e0c2      	b.n	8000626 <GPIO_Init+0x1e6>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d117      	bne.n	80004d8 <GPIO_Init+0x98>
		{
			//configure the FT selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b47      	ldr	r3, [pc, #284]	@ (80005c8 <GPIO_Init+0x188>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a43      	ldr	r2, [pc, #268]	@ (80005c8 <GPIO_Init+0x188>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b42      	ldr	r3, [pc, #264]	@ (80005c8 <GPIO_Init+0x188>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a3d      	ldr	r2, [pc, #244]	@ (80005c8 <GPIO_Init+0x188>)
 80004d2:	400b      	ands	r3, r1
 80004d4:	6093      	str	r3, [r2, #8]
 80004d6:	e035      	b.n	8000544 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b05      	cmp	r3, #5
 80004de:	d117      	bne.n	8000510 <GPIO_Init+0xd0>
		{
			//configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b39      	ldr	r3, [pc, #228]	@ (80005c8 <GPIO_Init+0x188>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a35      	ldr	r2, [pc, #212]	@ (80005c8 <GPIO_Init+0x188>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6093      	str	r3, [r2, #8]
			//clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b34      	ldr	r3, [pc, #208]	@ (80005c8 <GPIO_Init+0x188>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a2f      	ldr	r2, [pc, #188]	@ (80005c8 <GPIO_Init+0x188>)
 800050a:	400b      	ands	r3, r1
 800050c:	60d3      	str	r3, [r2, #12]
 800050e:	e019      	b.n	8000544 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b06      	cmp	r3, #6
 8000516:	d115      	bne.n	8000544 <GPIO_Init+0x104>
		{
			//configure the both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <GPIO_Init+0x188>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <GPIO_Init+0x188>)
 800052a:	430b      	orrs	r3, r1
 800052c:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <GPIO_Init+0x188>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <GPIO_Init+0x188>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
		}
		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	089b      	lsrs	r3, r3, #2
 800054a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	f003 0303 	and.w	r3, r3, #3
 8000554:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <GPIO_Init+0x18c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d045      	beq.n	80005ec <GPIO_Init+0x1ac>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <GPIO_Init+0x190>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d02b      	beq.n	80005c2 <GPIO_Init+0x182>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a19      	ldr	r2, [pc, #100]	@ (80005d4 <GPIO_Init+0x194>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d024      	beq.n	80005be <GPIO_Init+0x17e>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <GPIO_Init+0x198>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d01d      	beq.n	80005ba <GPIO_Init+0x17a>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <GPIO_Init+0x19c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d016      	beq.n	80005b6 <GPIO_Init+0x176>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <GPIO_Init+0x1a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d00f      	beq.n	80005b2 <GPIO_Init+0x172>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <GPIO_Init+0x1a4>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d008      	beq.n	80005ae <GPIO_Init+0x16e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <GPIO_Init+0x1a8>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <GPIO_Init+0x16a>
 80005a6:	2307      	movs	r3, #7
 80005a8:	e021      	b.n	80005ee <GPIO_Init+0x1ae>
 80005aa:	2300      	movs	r3, #0
 80005ac:	e01f      	b.n	80005ee <GPIO_Init+0x1ae>
 80005ae:	2306      	movs	r3, #6
 80005b0:	e01d      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e01b      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e019      	b.n	80005ee <GPIO_Init+0x1ae>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e017      	b.n	80005ee <GPIO_Init+0x1ae>
 80005be:	2302      	movs	r3, #2
 80005c0:	e015      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e013      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c6:	bf00      	nop
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40021400 	.word	0x40021400
 80005e4:	40021800 	.word	0x40021800
 80005e8:	40021c00 	.word	0x40021c00
 80005ec:	2300      	movs	r3, #0
 80005ee:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000764 <GPIO_Init+0x324>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a5b      	ldr	r2, [pc, #364]	@ (8000764 <GPIO_Init+0x324>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005fc:	7c7a      	ldrb	r2, [r7, #17]
 80005fe:	7cbb      	ldrb	r3, [r7, #18]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f103 	lsl.w	r1, r2, r3
 8000606:	4a58      	ldr	r2, [pc, #352]	@ (8000768 <GPIO_Init+0x328>)
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	3302      	adds	r3, #2
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000610:	4b56      	ldr	r3, [pc, #344]	@ (800076c <GPIO_Init+0x32c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a52      	ldr	r2, [pc, #328]	@ (800076c <GPIO_Init+0x32c>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]

	}
		temp=0;		//GPIO pin speed configuration
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clear bits
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	2303      	movs	r3, #3
 800064a:	408b      	lsls	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	400a      	ands	r2, r1
 8000656:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//set bits
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6899      	ldr	r1, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]

		temp=0;		//GPIO pin pupd configuration
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	79db      	ldrb	r3, [r3, #7]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clear bits
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2303      	movs	r3, #3
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;	//set bits
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]

		temp=0;		//GPIO pin optype configuration
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clear bits
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2301      	movs	r3, #1
 80006cc:	408b      	lsls	r3, r1
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;		//set bits
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6859      	ldr	r1, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	605a      	str	r2, [r3, #4]

		temp=0;		//GPIO pin alt function config
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d131      	bne.n	800075a <GPIO_Init+0x31a>
		{
			uint8_t temp1, temp2;

			temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	743b      	strb	r3, [r7, #16]
			temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));	//clear bits
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	220f      	movs	r2, #15
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7c3a      	ldrb	r2, [r7, #16]
 8000728:	4001      	ands	r1, r0
 800072a:	3208      	adds	r2, #8
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 *temp2)); //set bits
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	4301      	orrs	r1, r0
 8000754:	3208      	adds	r2, #8
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
 800076c:	40013c00 	.word	0x40013c00

08000770 <GPIO_PeriClockControl>:
 * param[2]		: ENABLE or DISABLE macros
 * return		: None
 * note			: None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d157      	bne.n	8000832 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a59      	ldr	r2, [pc, #356]	@ (80008ec <GPIO_PeriClockControl+0x17c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800078a:	4b59      	ldr	r3, [pc, #356]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a58      	ldr	r2, [pc, #352]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000796:	e0a3      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a56      	ldr	r2, [pc, #344]	@ (80008f4 <GPIO_PeriClockControl+0x184>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007a0:	4b53      	ldr	r3, [pc, #332]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	4a52      	ldr	r2, [pc, #328]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ac:	e098      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a51      	ldr	r2, [pc, #324]	@ (80008f8 <GPIO_PeriClockControl+0x188>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007b6:	4b4e      	ldr	r3, [pc, #312]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a4d      	ldr	r2, [pc, #308]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007c2:	e08d      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a4d      	ldr	r2, [pc, #308]	@ (80008fc <GPIO_PeriClockControl+0x18c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007cc:	4b48      	ldr	r3, [pc, #288]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	4a47      	ldr	r2, [pc, #284]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007d8:	e082      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a48      	ldr	r2, [pc, #288]	@ (8000900 <GPIO_PeriClockControl+0x190>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007e2:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a42      	ldr	r2, [pc, #264]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ee:	e077      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a44      	ldr	r2, [pc, #272]	@ (8000904 <GPIO_PeriClockControl+0x194>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007f8:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fc:	4a3c      	ldr	r2, [pc, #240]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000804:	e06c      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a3f      	ldr	r2, [pc, #252]	@ (8000908 <GPIO_PeriClockControl+0x198>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800080e:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a37      	ldr	r2, [pc, #220]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800081a:	e061      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a3b      	ldr	r2, [pc, #236]	@ (800090c <GPIO_PeriClockControl+0x19c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d15d      	bne.n	80008e0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000824:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 800082a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000830:	e056      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a2d      	ldr	r2, [pc, #180]	@ (80008ec <GPIO_PeriClockControl+0x17c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000846:	e04b      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a2a      	ldr	r2, [pc, #168]	@ (80008f4 <GPIO_PeriClockControl+0x184>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800085c:	e040      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <GPIO_PeriClockControl+0x188>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 800086c:	f023 0304 	bic.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000872:	e035      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a21      	ldr	r2, [pc, #132]	@ (80008fc <GPIO_PeriClockControl+0x18c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000882:	f023 0308 	bic.w	r3, r3, #8
 8000886:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000888:	e02a      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <GPIO_PeriClockControl+0x190>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 8000898:	f023 0310 	bic.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800089e:	e01f      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <GPIO_PeriClockControl+0x194>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ac:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008ae:	f023 0320 	bic.w	r3, r3, #32
 80008b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008b4:	e014      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <GPIO_PeriClockControl+0x198>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ca:	e009      	b.n	80008e0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <GPIO_PeriClockControl+0x19c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <GPIO_PeriClockControl+0x180>)
 80008da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	40021000 	.word	0x40021000
 8000904:	40021400 	.word	0x40021400
 8000908:	40021800 	.word	0x40021800
 800090c:	40021c00 	.word	0x40021c00

08000910 <I2C_ExecuteAddressWrite>:
{
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

static void I2C_ExecuteAddressWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //bit for read or write
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);		//slave address + r/w bit=0
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800092a:	78fa      	ldrb	r2, [r7, #3]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	611a      	str	r2, [r3, #16]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <I2C_ExecuteAddressRead>:

static void I2C_ExecuteAddressRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //bit for read or write
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;		//slave address + r/w bit=1
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	611a      	str	r2, [r3, #16]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint32_t read;
//	read = pI2Cx->SR2;
//	(void)read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d01f      	beq.n	80009be <I2C_ClearADDRFlag+0x56>
	{
		if(pI2CHandle->TxRxstate == I2C_BUSY_IN_RX)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7c9b      	ldrb	r3, [r3, #18]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d112      	bne.n	80009ac <I2C_ClearADDRFlag+0x44>
		{
			//device is master mode
			if(pI2CHandle->Rxsize == 1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7d1b      	ldrb	r3, [r3, #20]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d11f      	bne.n	80009ce <I2C_ClearADDRFlag+0x66>
			{
				//disable acknowledge
				I2C_ManageAck(pI2CHandle->pI2Cx, DISABLE);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fa37 	bl	8000e08 <I2C_ManageAck>

				//clear the ADDR flag
				read = pI2CHandle->pI2Cx->SR1;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	60fb      	str	r3, [r7, #12]
				read = pI2CHandle->pI2Cx->SR2;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	60fb      	str	r3, [r7, #12]
		read = pI2CHandle->pI2Cx->SR1;
		read = pI2CHandle->pI2Cx->SR2;
		(void)read;
	}

}
 80009aa:	e010      	b.n	80009ce <I2C_ClearADDRFlag+0x66>
			read = pI2CHandle->pI2Cx->SR1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	60fb      	str	r3, [r7, #12]
			read = pI2CHandle->pI2Cx->SR2;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	60fb      	str	r3, [r7, #12]
}
 80009bc:	e007      	b.n	80009ce <I2C_ClearADDRFlag+0x66>
		read = pI2CHandle->pI2Cx->SR1;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	60fb      	str	r3, [r7, #12]
		read = pI2CHandle->pI2Cx->SR2;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	60fb      	str	r3, [r7, #12]
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <I2C_SlaveEnDiCallbackEvents>:
 * param[2]		: ENABLE or DISABLE macros
 * return		: None
 * note			: None
 */
void I2C_SlaveEnDiCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d112      	bne.n	8000a2e <I2C_SlaveEnDiCallbackEvents+0x38>
	{
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
	{
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 8000a2c:	e011      	b.n	8000a52 <I2C_SlaveEnDiCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	605a      	str	r2, [r3, #4]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <I2C_PeriClockControl>:
 * param[2]		: ENABLE or DISABLE macros
 * return		: None
 * note			: None
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d120      	bne.n	8000ab4 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <I2C_PeriClockControl+0xa0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000a80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000a86:	e035      	b.n	8000af4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <I2C_PeriClockControl+0xa8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000a96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a9c:	e02a      	b.n	8000af4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b0c <I2C_PeriClockControl+0xac>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d126      	bne.n	8000af4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ab2:	e01f      	b.n	8000af4 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <I2C_PeriClockControl+0xa0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d106      	bne.n	8000aca <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ac8:	e014      	b.n	8000af4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <I2C_PeriClockControl+0xa8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d106      	bne.n	8000ae0 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000ad8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ade:	e009      	b.n	8000af4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <I2C_PeriClockControl+0xac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d105      	bne.n	8000af4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <I2C_PeriClockControl+0xa4>)
 8000aee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000af2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40005800 	.word	0x40005800
 8000b0c:	40005c00 	.word	0x40005c00

08000b10 <RCC_GetPLLOutputClock>:
uint32_t RCC_GetPLLOutputClock(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <RCC_GetPCLK1Value>:
 * param[1]		: I2C reset handler
 * return		: None
 * note			: None
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);		//get 2 bits to the LSB position and mask
 8000b26:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <RCC_GetPCLK1Value+0x9c>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000b34:	7a7b      	ldrb	r3, [r7, #9]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;	//HSI is 16MHz
 8000b3a:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <RCC_GetPCLK1Value+0xa0>)
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e00b      	b.n	8000b58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d102      	bne.n	8000b4c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;	//HSE is 8MHz
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <RCC_GetPCLK1Value+0xa4>)
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e005      	b.n	8000b58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8000b4c:	7a7b      	ldrb	r3, [r7, #9]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d102      	bne.n	8000b58 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000b52:	f7ff ffdd 	bl	8000b10 <RCC_GetPLLOutputClock>
 8000b56:	60f8      	str	r0, [r7, #12]
	}
	//for AHB pre_scaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <RCC_GetPCLK1Value+0x9c>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000b66:	7a3b      	ldrb	r3, [r7, #8]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d802      	bhi.n	8000b72 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	72fb      	strb	r3, [r7, #11]
 8000b70:	e005      	b.n	8000b7e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000b72:	7a3b      	ldrb	r3, [r7, #8]
 8000b74:	3b08      	subs	r3, #8
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <RCC_GetPCLK1Value+0xa8>)
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	72fb      	strb	r3, [r7, #11]
	}
	//for APB1 pre_scaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <RCC_GetPCLK1Value+0x9c>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	0a9b      	lsrs	r3, r3, #10
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d802      	bhi.n	8000b98 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	72bb      	strb	r3, [r7, #10]
 8000b96:	e004      	b.n	8000ba2 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000b98:	7a3b      	ldrb	r3, [r7, #8]
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bcc <RCC_GetPCLK1Value+0xac>)
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ba0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;		//formula to calculate clock
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000baa:	7abb      	ldrb	r3, [r7, #10]
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	00f42400 	.word	0x00f42400
 8000bc4:	007a1200 	.word	0x007a1200
 8000bc8:	20000020 	.word	0x20000020
 8000bcc:	20000034 	.word	0x20000034

08000bd0 <I2C_Init>:
 * param[1]		: I2C pin configuration handler
 * return		: None
 * note			: None
 *************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]

	//enable the clock for the I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff3c 	bl	8000a60 <I2C_PeriClockControl>

	//acknowledge bit control
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	029b      	lsls	r3, r3, #10
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	601a      	str	r2, [r3, #0]

	//configure FREQ(clock frequency) field of CR2
	tempreg = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000c00:	f7ff ff8e 	bl	8000b20 <RCC_GetPCLK1Value>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a22      	ldr	r2, [pc, #136]	@ (8000c90 <I2C_Init+0xc0>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	0c9b      	lsrs	r3, r3, #18
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c1e:	605a      	str	r2, [r3, #4]

	//configure the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
	tempreg |= (1 << 14);				//requirement says set this bit always 1
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c32:	60bb      	str	r3, [r7, #8]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	609a      	str	r2, [r3, #8]

	//configure the clock control register(CCR) calculation
	uint16_t ccr_value = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		//mode is standard
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ));
 8000c44:	f7ff ff6c 	bl	8000b20 <RCC_GetPCLK1Value>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	81fb      	strh	r3, [r7, #14]
		tempreg |= (ccr_value & 0xFFF);
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ));
		}
		tempreg |= (ccr_value & 0xFFF);
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	61da      	str	r2, [r3, #28]

	//TRISE rise time Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		//mode is standard
		tempreg = (RCC_GetPCLK1Value() / 1000000U ) + 1;
 8000c6a:	f7ff ff59 	bl	8000b20 <RCC_GetPCLK1Value>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <I2C_Init+0xc0>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
	}else
	{
		//mode is fast
		tempreg = ((RCC_GetPCLK1Value() * 300)/ 1000000U ) + 1;
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c86:	621a      	str	r2, [r3, #32]

}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	431bde83 	.word	0x431bde83

08000c94 <I2C_SlaveSendData>:
 * param[2]		: Data to be sent
 * return		: None
 * note			: None
 */
void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t Data)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = Data;
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	611a      	str	r2, [r3, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <I2C_SlaveReceiveData>:
 * param[1]		: receiver
 * return		: data
 * note			: None
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2C->DR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	b2db      	uxtb	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <I2C_IRQConfig>:
 * param[2]		: Enable/Disable macro
 * return		: None
 * note			: None
 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d133      	bne.n	8000d4a <I2C_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	d80a      	bhi.n	8000cfe <I2C_IRQConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <I2C_IRQConfig+0xf4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a32      	ldr	r2, [pc, #200]	@ (8000dc0 <I2C_IRQConfig+0xf4>)
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000cfc:	e059      	b.n	8000db2 <I2C_IRQConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)	//32 to 63
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b1f      	cmp	r3, #31
 8000d02:	d90f      	bls.n	8000d24 <I2C_IRQConfig+0x58>
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d08:	d80c      	bhi.n	8000d24 <I2C_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <I2C_IRQConfig+0xf8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	f002 021f 	and.w	r2, r2, #31
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a29      	ldr	r2, [pc, #164]	@ (8000dc4 <I2C_IRQConfig+0xf8>)
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e046      	b.n	8000db2 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96) //64 to 95
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d28:	d943      	bls.n	8000db2 <I2C_IRQConfig+0xe6>
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d2e:	d840      	bhi.n	8000db2 <I2C_IRQConfig+0xe6>
			*NVIC_ISER3 |= (1 << (IRQNumber % 64));
 8000d30:	4b25      	ldr	r3, [pc, #148]	@ (8000dc8 <I2C_IRQConfig+0xfc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a21      	ldr	r2, [pc, #132]	@ (8000dc8 <I2C_IRQConfig+0xfc>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	e033      	b.n	8000db2 <I2C_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	d80a      	bhi.n	8000d66 <I2C_IRQConfig+0x9a>
			*NVIC_ICER1 |= (1 << IRQNumber);
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	e025      	b.n	8000db2 <I2C_IRQConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)	//32 to 63
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	d90f      	bls.n	8000d8c <I2C_IRQConfig+0xc0>
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d70:	d80c      	bhi.n	8000d8c <I2C_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	f002 021f 	and.w	r2, r2, #31
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a11      	ldr	r2, [pc, #68]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000d86:	430b      	orrs	r3, r1
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e012      	b.n	8000db2 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96) //64 to 95
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d90:	d90f      	bls.n	8000db2 <I2C_IRQConfig+0xe6>
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d96:	d80c      	bhi.n	8000db2 <I2C_IRQConfig+0xe6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <I2C_IRQConfig+0x100>)
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	e7ff      	b.n	8000db2 <I2C_IRQConfig+0xe6>
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000e104 	.word	0xe000e104
 8000dc8:	e000e10c 	.word	0xe000e10c
 8000dcc:	e000e184 	.word	0xe000e184

08000dd0 <I2C_PeripheralControl>:
 * return		: None
 * note			: This is blocking or polling call function
 * 				: Here were polling for the TXE flag to SET
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d106      	bne.n	8000df0 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000dee:	e005      	b.n	8000dfc <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 0201 	bic.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <I2C_ManageAck>:
	}
	return FLAG_RESET;
}

void I2C_ManageAck(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d106      	bne.n	8000e28 <I2C_ManageAck+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000e26:	e005      	b.n	8000e34 <I2C_ManageAck+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <I2C_MasterRXNEInterrupt>:
	}
	return busystate;
}

static void I2C_MasterRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->Rxsize == 1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7d1b      	ldrb	r3, [r3, #20]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10c      	bne.n	8000e6a <I2C_MasterRXNEInterrupt+0x2a>
	{
		//1.receive  data from DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	701a      	strb	r2, [r3, #0]

		//2. decrement the Rx length
		pI2CHandle->RxLen--;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7c5b      	ldrb	r3, [r3, #17]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	745a      	strb	r2, [r3, #17]
	}
	if(pI2CHandle->Rxsize > 1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7d1b      	ldrb	r3, [r3, #20]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d91b      	bls.n	8000eaa <I2C_MasterRXNEInterrupt+0x6a>
	{
		if(pI2CHandle->RxLen == 2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7c5b      	ldrb	r3, [r3, #17]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d105      	bne.n	8000e86 <I2C_MasterRXNEInterrupt+0x46>
		{
			//clear the ack
			I2C_ManageAck(pI2CHandle->pI2Cx, DISABLE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffc1 	bl	8000e08 <I2C_ManageAck>
		}
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
		pI2CHandle->RxLen--;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7c5b      	ldrb	r3, [r3, #17]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	745a      	strb	r2, [r3, #17]
	}
	if(pI2CHandle->RxLen == 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c5b      	ldrb	r3, [r3, #17]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10f      	bne.n	8000ed2 <I2C_MasterRXNEInterrupt+0x92>
	{
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7d5b      	ldrb	r3, [r3, #21]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <I2C_MasterRXNEInterrupt+0x84>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fd89 	bl	80009d6 <I2C_GenerateStopCondition>

		//close receive data
		I2C_CloseReceiveData(pI2CHandle);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f988 	bl	80011da <I2C_CloseReceiveData>

		//notify application
		I2C_AppEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fa3f 	bl	8000350 <I2C_AppEventCallback>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <I2C_MasterTXEInterrupt>:

static void I2C_MasterTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7c1b      	ldrb	r3, [r3, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d010      	beq.n	8000f0c <I2C_MasterTXEInterrupt+0x32>
	{
		//1. load the data into DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	611a      	str	r2, [r3, #16]

		//2. decrement the Tx length
		pI2CHandle->TxLen--;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7c1b      	ldrb	r3, [r3, #16]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	741a      	strb	r2, [r3, #16]

		//3. increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]


	}
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	//interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f2a:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f36:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
	//1. handle for intrerupt generated by SB event
	//Note: SB flag applicable in master mode only
	if(temp1 && temp3)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d01b      	beq.n	8000f82 <I2C_EV_IRQHandling+0x6a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d018      	beq.n	8000f82 <I2C_EV_IRQHandling+0x6a>
	{
		//SB flag is set
		if(pI2CHandle->TxRxstate == I2C_BUSY_IN_TX)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7c9b      	ldrb	r3, [r3, #18]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d108      	bne.n	8000f6a <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7cdb      	ldrb	r3, [r3, #19]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff fcd4 	bl	8000910 <I2C_ExecuteAddressWrite>
 8000f68:	e00b      	b.n	8000f82 <I2C_EV_IRQHandling+0x6a>
		}else if(pI2CHandle->TxRxstate == I2C_BUSY_IN_RX)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7c9b      	ldrb	r3, [r3, #18]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7cdb      	ldrb	r3, [r3, #19]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff fcdd 	bl	800093c <I2C_ExecuteAddressRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
	//2. handle for interrupt generated by ADDR event
	//Note: master mode - address sent/slave mode - address matched with own address
	if(temp1 && temp3)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <I2C_EV_IRQHandling+0x88>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <I2C_EV_IRQHandling+0x88>
	{
		//ADDR flag is set
		I2C_ClearADDRFlag(pI2CHandle);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fce4 	bl	8000968 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
	//3.handle for interrpt generated by BTF(byte transfer finished) event
	if(temp1 && temp3)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d021      	beq.n	8000ff6 <I2C_EV_IRQHandling+0xde>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01e      	beq.n	8000ff6 <I2C_EV_IRQHandling+0xde>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxstate == I2C_BUSY_IN_TX)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7c9b      	ldrb	r3, [r3, #18]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d11a      	bne.n	8000ff6 <I2C_EV_IRQHandling+0xde>
		{
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))		//make sure TXE is set
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <I2C_EV_IRQHandling+0xde>
			{
				if(pI2CHandle->TxLen == 0){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7c1b      	ldrb	r3, [r3, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10f      	bne.n	8000ff6 <I2C_EV_IRQHandling+0xde>
					//generate the stop condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7d5b      	ldrb	r3, [r3, #21]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <I2C_EV_IRQHandling+0xd0>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fcf7 	bl	80009d6 <I2C_GenerateStopCondition>

					//reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f920 	bl	800122e <I2C_CloseSendData>

					//notify the application about transmission complete
					I2C_AppEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff f9ad 	bl	8000350 <I2C_AppEventCallback>
				;
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	60fb      	str	r3, [r7, #12]
	//4. handle for the interrpt generated by STOP event
	//Note: stop detection flag applicable in slave mode
	if(temp1 && temp3)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <I2C_EV_IRQHandling+0x10a>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <I2C_EV_IRQHandling+0x10a>
	{
		//STOP flag is set
		//clear STOPF read SR1 write CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	601a      	str	r2, [r3, #0]

		//notify application that STOP is detected
		I2C_AppEventCallback(pI2CHandle, I2C_EV_STOP);
 800101a:	2102      	movs	r1, #2
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f997 	bl	8000350 <I2C_AppEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102c:	60fb      	str	r3, [r7, #12]
	//5. handle for interrpt generated by TXE event
	if(temp1 && temp2 && temp3)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01f      	beq.n	8001074 <I2C_EV_IRQHandling+0x15c>
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01c      	beq.n	8001074 <I2C_EV_IRQHandling+0x15c>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d019      	beq.n	8001074 <I2C_EV_IRQHandling+0x15c>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))		//check for device mode
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <I2C_EV_IRQHandling+0x146>
		{
			//TXE flag is set
			if(pI2CHandle->TxRxstate == I2C_BUSY_IN_TX)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7c9b      	ldrb	r3, [r3, #18]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d10e      	bne.n	8001074 <I2C_EV_IRQHandling+0x15c>
			{
				I2C_MasterTXEInterrupt(pI2CHandle);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff3f 	bl	8000eda <I2C_MasterTXEInterrupt>
 800105c:	e00a      	b.n	8001074 <I2C_EV_IRQHandling+0x15c>
			}
		}else
		{
			//slave mode - make sure that slave is in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <I2C_EV_IRQHandling+0x15c>
			{
				I2C_AppEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 800106c:	2108      	movs	r1, #8
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f96e 	bl	8000350 <I2C_AppEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800107e:	60fb      	str	r3, [r7, #12]
	//6. handle for interrpt generated by RXNE event
	if(temp1 && temp2 && temp3)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01f      	beq.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01c      	beq.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))		//check for device mode
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <I2C_EV_IRQHandling+0x198>
		{
			//RXNE flag is set
			if(pI2CHandle->TxRxstate == I2C_BUSY_IN_RX)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7c9b      	ldrb	r3, [r3, #18]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10e      	bne.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
			{
				I2C_MasterRXNEInterrupt(pI2CHandle);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fec9 	bl	8000e40 <I2C_MasterRXNEInterrupt>
				I2C_AppEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}

}
 80010ae:	e00a      	b.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <I2C_EV_IRQHandling+0x1ae>
				I2C_AppEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80010be:	2109      	movs	r1, #9
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f945 	bl	8000350 <I2C_AppEventCallback>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e0:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <I2C_ER_IRQHandling+0x44>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001108:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_AppEventCallback(pI2CHandle, I2C_ERROR_BERR);
 800110a:	2103      	movs	r1, #3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f91f 	bl	8000350 <I2C_AppEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800111c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00e      	beq.n	8001142 <I2C_ER_IRQHandling+0x74>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001138:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_AppEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 800113a:	2104      	movs	r1, #4
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f907 	bl	8000350 <I2C_AppEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800114c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00e      	beq.n	8001172 <I2C_ER_IRQHandling+0xa4>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001168:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_AppEventCallback(pI2CHandle, I2C_ERROR_AF);
 800116a:	2105      	movs	r1, #5
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f8ef 	bl	8000350 <I2C_AppEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800117c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <I2C_ER_IRQHandling+0xd4>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001198:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_AppEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800119a:	2106      	movs	r1, #6
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff f8d7 	bl	8000350 <I2C_AppEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ac:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00e      	beq.n	80011d2 <I2C_ER_IRQHandling+0x104>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011c8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_AppEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80011ca:	2107      	movs	r1, #7
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff f8bf 	bl	8000350 <I2C_AppEventCallback>
	}
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
	//implement the code to disable ITBUFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011f0:	605a      	str	r2, [r3, #4]

	//implement the code to disable ITEVFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001200:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxstate = I2C_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	749a      	strb	r2, [r3, #18]
	pI2CHandle->pRxBuffer = NULL;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
	pI2CHandle->RxLen = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	745a      	strb	r2, [r3, #17]
	pI2CHandle->Rxsize = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
	I2C_ManageAck(pI2CHandle->pI2Cx, ENABLE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fdf1 	bl	8000e08 <I2C_ManageAck>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
	//implement the code to disable ITBUFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001244:	605a      	str	r2, [r3, #4]

	//implement the code to disable ITEVFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001254:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxstate = I2C_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	749a      	strb	r2, [r3, #18]
	pI2CHandle->pTxBuffer = NULL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	pI2CHandle->TxLen = 0;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	741a      	strb	r2, [r3, #16]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <__libc_init_array>:
 8001274:	b570      	push	{r4, r5, r6, lr}
 8001276:	4d0d      	ldr	r5, [pc, #52]	@ (80012ac <__libc_init_array+0x38>)
 8001278:	4c0d      	ldr	r4, [pc, #52]	@ (80012b0 <__libc_init_array+0x3c>)
 800127a:	1b64      	subs	r4, r4, r5
 800127c:	10a4      	asrs	r4, r4, #2
 800127e:	2600      	movs	r6, #0
 8001280:	42a6      	cmp	r6, r4
 8001282:	d109      	bne.n	8001298 <__libc_init_array+0x24>
 8001284:	4d0b      	ldr	r5, [pc, #44]	@ (80012b4 <__libc_init_array+0x40>)
 8001286:	4c0c      	ldr	r4, [pc, #48]	@ (80012b8 <__libc_init_array+0x44>)
 8001288:	f000 f818 	bl	80012bc <_init>
 800128c:	1b64      	subs	r4, r4, r5
 800128e:	10a4      	asrs	r4, r4, #2
 8001290:	2600      	movs	r6, #0
 8001292:	42a6      	cmp	r6, r4
 8001294:	d105      	bne.n	80012a2 <__libc_init_array+0x2e>
 8001296:	bd70      	pop	{r4, r5, r6, pc}
 8001298:	f855 3b04 	ldr.w	r3, [r5], #4
 800129c:	4798      	blx	r3
 800129e:	3601      	adds	r6, #1
 80012a0:	e7ee      	b.n	8001280 <__libc_init_array+0xc>
 80012a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a6:	4798      	blx	r3
 80012a8:	3601      	adds	r6, #1
 80012aa:	e7f2      	b.n	8001292 <__libc_init_array+0x1e>
 80012ac:	080012dc 	.word	0x080012dc
 80012b0:	080012dc 	.word	0x080012dc
 80012b4:	080012dc 	.word	0x080012dc
 80012b8:	080012e0 	.word	0x080012e0

080012bc <_init>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr

080012c8 <_fini>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	bf00      	nop
 80012cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ce:	bc08      	pop	{r3}
 80012d0:	469e      	mov	lr, r3
 80012d2:	4770      	bx	lr
